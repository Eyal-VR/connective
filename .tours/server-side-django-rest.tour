{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Server Side: Django Rest",
  "steps": [
    {
      "file": "server/server/organizations/models.py",
      "description": "This is a model. Django docs describe it models as \n\"the single, definitive source of information about your data\":\n* Notice that the class `Organization` inherits from `models.Model`\n* This means that it will eventually be reflected in our database as a table.\n* Attributes are assigned a field type such as\n```\n      description = models.CharField(max_length=250)\n```\n",
      "line": 7,
      "selection": {
        "start": {
          "line": 12,
          "character": 5
        },
        "end": {
          "line": 12,
          "character": 51
        }
      }
    },
    {
      "file": "server/server/organizations/api/serializers.py",
      "description": "The next piece of this puzzle is Serializer.\n\n`OrganizationSerializer` is a model serizlizer.\n\nIt defines how a Django model will be serialized and deserialized to/from format types such as JSON and XML(in our case, mostly JSON).\n\nSerializers can also serve as a validation layer.\n\nModel Serializers allow a high level of abstraction.\nAll they really need to do their magic as a `Meta` class with two attributes:\n1. `model`: The model we wish to handle.\n2. `fields`: A list of fields we wish to expose.\n\n\n\n\n\n",
      "line": 5
    },
    {
      "file": "server/server/organizations/api/views.py",
      "description": "\nDjango views conveniently wrap the request/response cycle for us.\n\nRest Framework `ViewSets` are a set of handlers for different types of requests.\n\na `ModelViewSet` has handlers for CREAT/READ/UPDATE/DELETE(CRUD) actions.\n\nYou can also pick and choose actions using mixins in conjunction with `GenericViewSet`.\nTo handle requests, viewsets need:\n* A serializer class to work with\n* A `queryset` attribute or a `get_queryset` method\n\nAditional functionally you can quickly implement with ViewSets include:\n* Permissions: Who can do what\n* Filtering/Searching with query params\n* Action routes: Routes that call specific actions (beyond standard rest calls).",
      "line": 11
    },
    {
      "file": "server/config/api_router.py",
      "description": "To complete our request-response cycle, we define routes to our viewsets.\nThis will point `http..../api/organizatons/` to our endpoint.",
      "line": 15
    },
    {
      "title": "Conclusion",
      "description": "We have only scratched the surface of what Django Rest Framework offers out of the box.\nWhile the tools we used are a great way to get going, Rest Framework provides utilities for all levels of abstraction.\nIf you feel there is too much magic going on, are free to use leaner utils.\n\nWhether you need a complete walkthrough or just a quick reference, [the Rest Framework documentation](https://www.django-rest-framework.org/) is a superb resource at your disposal.\n\n"
    }
  ]
}
