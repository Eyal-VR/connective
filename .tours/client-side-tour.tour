{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Client Side: Introduction",
  "steps": [
    {
      "title": "Introduction",
      "description": "## Hey there!\n\n### Welcome to the client-side code tour.\n\n### In this tour you will get familiar with the frontend code base.\n"
    },
    {
      "file": "client/src/main.js",
      "description": "### Vue.js\n\nAs you can see, the client-side is based on the amazing Vue.js framework (version 2.x).\n\nLet's take a look at the file structure!",
      "line": 23,
      "title": "Vue.js"
    },
    {
      "directory": "client",
      "description": "### File structure overview\n\nAll client-side related code exists under the \"client\" directory.\nThe main folder under \"client\" is \"src\", which we will cover in a moment.\n\nOther relevant files & folder are:\n1. package.json: contains project configs & packages to install.\n2. tests: used for testing\n3. json-server: a backend API mock (see: https://www.npmjs.com/package/json-server)\n\n\nLet's see what's in the \"src\" folder..."
    },
    {
      "file": "client/src/layouts/Welcome.vue",
      "description": "### Src Folder: Vue Components (1)\nvue.js components files are separated into 3 folders:\n1. components: usually reusable, generic components. e.g., Navbar.vue. Use them when writing code!\n2. views: usually refers to a full page. e.g., Login.vue\n3. layouts: components that wrap views. e.g., Welcome.vue, which would have both Login.vue & Register.vue encapsulated in it.\n\nWe won't dive into each and every one of them, but you're more than welcome to check them out!\n",
      "line": 1,
      "title": "Src Folder: Vue Components (1)"
    },
    {
      "file": "client/src/components/Navbar.vue",
      "description": "### Src Folder: Vue Components (2) - Vuetify\n\n* Note that we're using *Vuetify* as our design framework.\n* Vuetify consists of many components we can use out-of-the-box for faster coding.\n* For example, in this component (Navbar), we use v-toolbar, v-tooltip, v-btn, etc.\n* Make sure to use Vuetify components! They are so easy to use!\n* For more information:  https://vuetifyjs.com/",
      "line": 2,
      "title": "Src Folder: Vue Components (2)"
    },
    {
      "file": "client/src/helpers/constants/constants.js",
      "description": "### Src Folder: Helpers\n\ninside src/, you can also find the *helpers* folder, which consists of *constants* (the file we're currently visiting), *utils*, *validators* (for vee-validate forms)\nNotes:\n1. When adding images, make sure to add them to images.js constants.\n2. Check *utils.js* for useful functions!",
      "line": 1,
      "selection": {
        "start": {
          "line": 7,
          "character": 22
        },
        "end": {
          "line": 26,
          "character": 21
        }
      }
    },
    {
      "file": "client/src/locales/he.json",
      "description": "### Src Folder: Internationalization (1)\n\nSimilar to the constants folder, We maintain a JSON of all translations under *locales* directory.\n",
      "line": 1
    },
    {
      "file": "client/src/views/Error.vue",
      "description": "### Src Folder: Internationalization (2)\n\nTo use the translation, simply use `this.$t(\"json.path\")`.\n\nIn the example above, we can see a button, whose text is a translation for the word \"Homepage\"",
      "line": 19,
      "title": "Src Folder: Internationalization (2)"
    },
    {
      "file": "client/src/styles/main.scss",
      "description": "### Src Folder: Global Styles\n\nGlobal scss styles can be found under *src/styles*",
      "line": 1
    },
    {
      "file": "client/src/vuex/store.js",
      "description": "### Src Folder: Vuex\n\nOur state management is based on *Vuex*.\n\nVuex modules are imported to *store.js* and registered in the store.\n\nExamples for global info stored here are:\n* user profile, pagination data\n* list of programs\n* authentication status\n* etc.\n",
      "line": 1
    },
    {
      "file": "client/src/vuex/store.js",
      "description": "### Src Folder: Vuex (2)\n\nQuick Sidenote:\n* the `flushState` action is pretty handy, whenever you want to flush/reset a module's state.\n",
      "line": 22
    },
    {
      "file": "client/src/api/index.js",
      "description": "### Src Folder: API\n\n1. Most vuex modules use the API service.\n2. For maintainability purposes, we prefer using the API only through Vuex.",
      "line": 7
    },
    {
      "file": "client/src/api/user.js",
      "description": "### Src Folder: API (2)\n\nFor example, the \"user\" vuex module, uses Api.user.getProfile() to fetch user data from the server.",
      "line": 5
    },
    {
      "file": "client/src/router/index.js",
      "description": "### Src Folder: Vue Router\n\nThis is the *Vue Router*!\n\nIt's simply an object containing all the routes.\n\n",
      "line": 1
    },
    {
      "file": "client/src/router/index.js",
      "description": "### Src Folder: Vue Router\n\nThis is the *Vue Router*!\n\nMost of it is simply the `routes` object containing all the routes (see below).\n\n",
      "line": 24
    },
    {
      "file": "client/src/router/index.js",
      "description": "### Src Folder: Vue Router (2)\n\nNote that the route always starts with the requested language.\n#### An example URL would be:\n\n`BASE_URL/he/welcome/login`\n\n#### Note the pattern:\n\n`BASE_URL/:lang/:layout-name/:view-name`\n\n\n\nLet's proceed to the *assets* folder\n",
      "line": 32
    },
    {
      "directory": "client/src/assets",
      "description": "### Src Folder: Assets\n\nThis is the assets folder - where our images & fonts live.\n\nUploading Images:\n1. For optimization purposes, we serve optimized, webp images.\n2. To upload an image, simply put it in *assets/img/original/big*, and run: `yarn imagemin`\n3. An optimized version would appear under *img/optimized* folder\n\n* if the original image is relatively small, use */original/small* instead.\n\n"
    },
    {
      "title": "Wrap Up",
      "description": "That's pretty much it!\n\nYou're now familiar with the client-side code.\n\nLet's Recap:\n1. *client/src* folder is where our code lives.\n2. Our Vue components are seperated into: *components/* (reusable code), *views/* (each view is a page), *layouts/* (each contains for multiple pages).\n3. Our Vue components use *Vuetify*, which saves us a lot of time.\n3. *Helpers* folder: where our constants, utils, and validators live.\n4. i18n: all translations are kept inside a JSON file, and can be refferenced using: `this.$t()`\n5. Global scss styles rock.\n5. Vuex is used for global state management.\n6. Vuex uses the API service to communicate with the server-side.\n7. *router/index.js* is where our routes live.\n\n\n#### Awesome! \n\nNow go ahead and grab yourself an issue!\n\nhttps://github.com/connectiveproject/connective/issues\n\n\nBest of Luck!\n"
    }
  ]
}